# bot.py
import os
import asyncio
from datetime import datetime, timezone

from telegram import Update
from telegram.constants import UpdateType
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    JobQueue,
)


from sqlalchemy import (
    create_engine,
    Column,
    Integer,
    String,
    Boolean,
    DateTime,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import scoped_session, sessionmaker

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Ñ–∏–≥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN = os.getenv("BOT_TOKEN")
BRIDE_CHAT_ID = int(os.getenv("BRIDE_CHAT_ID", "0"))
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
DB_URL = os.getenv("DATABASE_URL", "sqlite:///guests.db")
engine = create_engine(DB_URL, echo=False, pool_pre_ping=True)
Session = scoped_session(sessionmaker(bind=engine, autoflush=False))
Base = declarative_base()


class Guest(Base):
    __tablename__ = "guests"

    id = Column(Integer, primary_key=True)
    name = Column(String(128), nullable=False)
    partner = Column(String(128))
    wishes = Column(String(512))
    attending = Column(Boolean, default=True)
    notified = Column(Boolean, default=False)
    created = Column(DateTime, default=lambda: datetime.now(timezone.utc))

    def __repr__(self) -> str:
        return f"<Guest {self.name}>"


Base.metadata.create_all(engine)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ö–µ–Ω–¥–ª–µ—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ù–∞–¥—è! üíç</b>\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\n"
        "2. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π ‚Äî /guests\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª–∞ –º–Ω–µ —Ç–∞–∫—É—é –≤–∞–∂–Ω—É—é –º–∏—Å—Å–∏—é ü§ç",
        parse_mode=constants.ParseMode.HTML,
    )


async def cmd_guests(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    db = Session()
    try:
        guests = db.query(Guest).filter_by(attending=True).order_by(Guest.created).all()
        if not guests:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ üò¢")
            return

        lines = ["üìã <b>–ì–æ—Å—Ç–∏:</b>"]
        for idx, g in enumerate(guests, 1):
            line = f"<b>{idx}) {g.name}</b>"
            if g.partner:
                line += f"<b> + {g.partner.strip()}</b>"
            if g.wishes:
                line += f". <i>–ü–æ–∂–µ–ª–∞–Ω–∏—è: {g.wishes.strip()}</i>"
            lines.append(line)

        await update.message.reply_text(
            "\n".join(lines), parse_mode=constants.ParseMode.HTML
        )
    finally:
        db.close()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ñ–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≥–æ—Å—Ç–µ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def check_new_guests(ctx: ContextTypes.DEFAULT_TYPE) -> None:
    db = Session()
    try:
        new_guests = db.query(Guest).filter_by(notified=False).all()
        for g in new_guests:
            text = (
                f"üíå <b>–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ</b>\n"
                f"üë§ <b>–ì–æ—Å—Ç—å:</b> {g.name}\n"
                f"‚úÖ <b>–ë—É–¥–µ—Ç:</b> {'–î–∞' if g.attending else '–ù–µ—Ç'}\n"
                f"üíë <b>–ü–∞—Ä—Ç–Ω—ë—Ä:</b> {g.partner.strip() if g.partner else '–ù–µ—Ç'}\n"
                f"üìù <b>–ü–æ–∂–µ–ª–∞–Ω–∏—è:</b> {g.wishes.strip() if g.wishes else '–ù–µ—Ç'}"
            )
            try:
                await ctx.bot.send_message(BRIDE_CHAT_ID, text, parse_mode="HTML")
                await ctx.bot.send_message(ADMIN_CHAT_ID, text, parse_mode="HTML")
                g.notified = True
                db.commit()
            except Exception as exc:
                # –µ—Å–ª–∏ –¢–µ–ª–µ–≥—Ä–∞–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –Ω–µ —Å—Ç–∞–≤–∏–º notified, –ø–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∑–∂–µ
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", exc)
                db.rollback()
    finally:
        db.close()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main() -> None:
    if not BOT_TOKEN:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("guests", cmd_guests))

    # JobQueue ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≥–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫
    app.job_queue.run_repeating(check_new_guests, interval=5, first=0)

    # long polling
    print("üöÄ Bot is starting (long polling)‚Ä¶")
    app.run_polling()


if __name__ == "__main__":
    main()
